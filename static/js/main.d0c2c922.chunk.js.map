{"version":3,"sources":["logo.svg","Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","yurl","Player","state","links","playerLinks","errmsg","validateLink","url","len","length","startstr","substr","console","log","addLink","event","preventDefault","msg","link","target","value","setState","selectLink","i","slice","this","className","onSubmit","InputGroup","FormControl","placeholder","aria-label","aria-describedby","type","Append","Button","variant","width","height","controls","ListGroup","defaultActiveKey","map","Item","key","onClick","style","cursor","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0OCKrCC,EAAO,mCAqGEC,E,4MAlGXC,MAAQ,CACJC,MAAO,GACPC,YAAa,GACbC,OAAQ,I,EAGZC,aAAe,SAAAC,GACX,IAAIC,EAAMR,EAAKS,OACXC,EAAWH,EAAII,OAAO,EAAGH,GAE7B,OADAI,QAAQC,IAAI,WAAYH,EAAU,MAAOH,GACrCG,GAAYV,G,EAMpBc,QAAU,SAAAC,GACNA,EAAMC,iBACN,IAAIC,EAAM,GACNC,EAAOH,EAAMI,OAAO,GAAGC,MACvB,EAAKd,aAAaY,IACd,EAAKhB,MAAMC,MAAMM,OACjB,EAAKY,SAAS,CACVlB,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBe,IAC7Bd,YAAY,GAAD,mBAAM,EAAKF,MAAMC,OAAjB,CAAwBe,MAS3CN,QAAQC,IAAI,QAAS,EAAKX,MAAMC,OAChCc,EAAM,IAGNA,EAAM,gCAEV,EAAKI,SAAS,CAAEhB,OAAQY,K,EAG5BK,WAAa,SAAAC,GAAM,IACRpB,EAAS,EAAKD,MAAdC,MACPS,QAAQC,IAAI,gBAAiBU,GAC7B,EAAKF,SAAS,CAAEjB,YAAY,GAAD,mBAAMD,EAAMqB,MAAMD,EAAGpB,EAAMM,SAA3B,YAAuCN,EAAMqB,MAAM,EAAGD,OACjFX,QAAQC,IAAI,YAAa,EAAKX,MAAME,c,uDAG9B,IAAD,SACkCqB,KAAKvB,MAApCC,EADH,EACGA,MAAOC,EADV,EACUA,YAAaC,EADvB,EACuBA,OAC5B,OACI,yBAAKqB,UAAU,aACX,yBAAKA,UAAU,UACX,0BAAMC,SAAUF,KAAKX,SACjB,kBAACc,EAAA,EAAD,CAAYF,UAAU,QAClB,kBAACG,EAAA,EAAD,CACIC,YAAY,mBACZC,aAAW,mBACXC,mBAAiB,eACjBC,KAAK,SAET,kBAACL,EAAA,EAAWM,OAAZ,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,UAA/B,eAIX5B,EAAOI,OAAS,GAAK,yBAAKiB,UAAU,UAAUrB,IAEnD,yBAAKqB,UAAU,WACX,yBAAKA,UAAU,SACX,kBAAC,IAAD,CACIA,UAAU,eACVnB,IAAKH,EACLiC,MAAM,OACNC,OAAO,OACPC,SAAS,UAGjB,yBAAKb,UAAU,YACX,wCACA,6BACA,kBAACc,EAAA,EAAD,CAAWC,iBAAkBtC,EAAMM,OAAS,GAAKN,EAAM,IAClDA,EAAMuC,KAAI,SAACnC,EAAKgB,GACb,OACI,kBAACiB,EAAA,EAAUG,KAAX,CAAgBC,IAAKrB,EAAGsB,QAAS,kBAAM,EAAKvB,WAAWC,IAAIuB,MAAO,CAAEC,OAAQ,YAA5E,QACUxB,EAAI,c,GAvF7ByB,a,MCONC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCGcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.d0c2c922.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\"\r\nimport \"./player.css\"\r\nimport { InputGroup, FormControl, Button, ListGroup } from \"react-bootstrap\"\r\nimport ReactPlayer from \"react-player\"\r\n\r\nconst yurl = \"https://www.youtube.com/watch?v=\"\r\n\r\nclass Player extends Component {\r\n    state = {        \r\n        links: [],\r\n        playerLinks: [],\r\n        errmsg: \"\"\r\n    }\r\n\r\n    validateLink = url => {\r\n        let len = yurl.length\r\n        let startstr = url.substr(0, len)\r\n        console.log(\"startstr\", startstr, \"url\", url)\r\n        if (startstr == yurl)\r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n    addLink = event => {\r\n        event.preventDefault()\r\n        let msg = \"\"\r\n        let link = event.target[0].value\r\n        if (this.validateLink(link)) {\r\n            if (this.state.links.length == 0) {\r\n                this.setState({\r\n                    links: [...this.state.links, link],\r\n                    playerLinks: [...this.state.links, link]                    \r\n                })\r\n            }\r\n            else\r\n                this.setState({\r\n                    links: [...this.state.links, link],\r\n                    playerLinks: [...this.state.links, link]\r\n                })\r\n\r\n            console.log(\"links\", this.state.links)\r\n            msg = \"\"\r\n        }\r\n        else\r\n            msg = \"Please add valid youtube link\"\r\n\r\n        this.setState({ errmsg: msg })\r\n    }\r\n\r\n    selectLink = i => {\r\n        const {links} = this.state\r\n        console.log(\"selected link\", i)\r\n        this.setState({ playerLinks: [...links.slice(i, links.length), ...links.slice(0, i )] }) \r\n        console.log(\"activeurl\", this.state.playerLinks)\r\n    }\r\n\r\n    render() {\r\n        const { links, playerLinks, errmsg } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"header\">\r\n                    <form onSubmit={this.addLink}>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <FormControl\r\n                                placeholder=\"Add Youtube link\"\r\n                                aria-label=\"Add Youtube link\"\r\n                                aria-describedby=\"basic-addon2\"\r\n                                type=\"text\"                                \r\n                            />\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"warning\" type=\"submit\">Add Link</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </form>\r\n                    {errmsg.length > 0 && <div className=\"errmsg\">{errmsg}</div>}\r\n                </div>\r\n                <div className=\"playbox\">\r\n                    <div className=\"video\">\r\n                        <ReactPlayer\r\n                            className='react-player'\r\n                            url={playerLinks}\r\n                            width='100%'\r\n                            height='100%'\r\n                            controls=\"true\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"playlist\">\r\n                        <h3>PLAYLIST</h3>\r\n                        <hr />\r\n                        <ListGroup defaultActiveKey={links.length > 0 && links[0]}>\r\n                            {links.map((url, i) => {\r\n                                return (\r\n                                    <ListGroup.Item key={i} onClick={() => this.selectLink(i)} style={{ cursor: \"Pointer\" }} >\r\n                                        Link {i + 1}\r\n                                    </ListGroup.Item>\r\n                                )\r\n                            })}\r\n                        </ListGroup>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Player from \"./Player\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Player />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}